import numpy as np
import json
import torch

# 假设你的图像数据是一个四维张量，形状为 [batch_size, channels, height, width]
# 这里我们生成一个模拟数据作为示例
# batch_size = 100  # 示例批量大小
# channels = 3      # RGB通道
# height = 480      # 图像高度
# width = 640       # 图像宽度
a = [{'observation.images.laptop': np.array([[[[0.16862746, 0.16862746, 0.16862746,   0.39607844,
          0.4       , 0.40392157],
         [0.16862746, 0.16862746, 0.16862746,   0.39607844,
          0.39607844, 0.4       ],
         [0.16862746, 0.16862746, 0.16862746,   0.39215687,
          0.39607844, 0.4       ],
         [0.08627451, 0.08627451, 0.08627451,   0.39215687,
          0.38431373, 0.38039216],
         [0.08627451, 0.08627451, 0.08627451,   0.3882353 ,
          0.38039216, 0.38039216],
         [0.08627451, 0.08627451, 0.08627451,   0.3882353 ,
          0.38039216, 0.38039216]],

        [[0.23921569, 0.23921569, 0.23921569,   0.30588236,
          0.30588236, 0.30980393],
         [0.23921569, 0.23921569, 0.23921569,   0.3019608 ,
          0.3019608 , 0.30588236],
         [0.23921569, 0.23921569, 0.23921569,   0.3019608 ,
          0.3019608 , 0.30588236],
         [0.15294118, 0.15294118, 0.15294118,   0.3019608 ,
          0.29411766, 0.2901961 ],
         [0.15294118, 0.15294118, 0.15294118,   0.3019608 ,
          0.2901961 , 0.28627452],
         [0.15294118, 0.15294118, 0.15294118,   0.3019608 ,
          0.2901961 , 0.28627452]],

        [[0.3137255 , 0.3137255 , 0.3137255 ,   0.20784314,
          0.21176471, 0.21568628],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.20784314,
          0.20784314, 0.21568628],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.20392157,
          0.20784314, 0.21568628],
         [0.21568628, 0.21568628, 0.21568628,   0.21176471,
          0.2       , 0.2       ],
         [0.21568628, 0.21568628, 0.21568628,   0.21176471,
          0.2       , 0.2       ],
         [0.21568628, 0.21568628, 0.21568628,   0.20784314,
          0.2       , 0.2       ]]]], dtype=np.float32), 
          'observation.images.phone': np.array([[[[0.03921569, 0.03921569, 0.03921569,   0.03921569,
          0.03921569, 0.03921569],
         [0.03921569, 0.03921569, 0.03921569,   0.03921569,
          0.03921569, 0.03921569],
         [0.03921569, 0.03921569, 0.03921569,   0.03921569,
          0.03921569, 0.03921569],
         [0.40784314, 0.40784314, 0.40784314,   0.47843137,
          0.47843137, 0.47843137],
         [0.40784314, 0.40784314, 0.4117647 ,   0.4745098 ,
          0.47843137, 0.47843137],
         [0.40392157, 0.40392157, 0.40392157,   0.4745098 ,
          0.4745098 , 0.4745098 ]],

        [[0.07843138, 0.07843138, 0.07843138,   0.07843138,
          0.07843138, 0.07843138],
         [0.07843138, 0.07843138, 0.07843138,   0.07843138,
          0.07843138, 0.07843138],
         [0.07843138, 0.07843138, 0.07843138,   0.07843138,
          0.07843138, 0.07843138],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.37254903,
          0.36862746, 0.36862746],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.37254903,
          0.36862746, 0.36862746],
         [0.30588236, 0.30588236, 0.30588236,   0.36862746,
          0.3647059 , 0.3647059 ]],

        [[0.12156863, 0.12156863, 0.12156863,   0.12156863,
          0.12156863, 0.12156863],
         [0.12156863, 0.12156863, 0.12156863,   0.12156863,
          0.12156863, 0.12156863],
         [0.12156863, 0.12156863, 0.12156863,   0.12156863,
          0.12156863, 0.12156863],
         [0.21960784, 0.21960784, 0.21960784,   0.2627451 ,
          0.2627451 , 0.2627451 ],
         [0.22352941, 0.22352941, 0.21960784,   0.2627451 ,
          0.2627451 , 0.2627451 ],
         [0.21176471, 0.21176471, 0.20784314,   0.2627451 ,
          0.25882354, 0.25882354]]]], dtype=np.float32)},
         {'observation.images.laptop': np.array([[[[0.16862746, 0.16862746, 0.16862746,   0.39607844,
          0.4       , 0.40392157],
         [0.16862746, 0.16862746, 0.16862746,   0.39607844,
          0.39607844, 0.4       ],
         [0.16862746, 0.16862746, 0.16862746,   0.39215687,
          0.39607844, 0.4       ],
         [0.08627451, 0.08627451, 0.08627451,   0.39215687,
          0.38431373, 0.38039216],
         [0.08627451, 0.08627451, 0.08627451,   0.3882353 ,
          0.38039216, 0.38039216],
         [0.08627451, 0.08627451, 0.08627451,   0.3882353 ,
          0.38039216, 0.38039216]],

        [[0.23921569, 0.23921569, 0.23921569,   0.30588236,
          0.30588236, 0.30980393],
         [0.23921569, 0.23921569, 0.23921569,   0.3019608 ,
          0.3019608 , 0.30588236],
         [0.23921569, 0.23921569, 0.23921569,   0.3019608 ,
          0.3019608 , 0.30588236],
         [0.15294118, 0.15294118, 0.15294118,   0.3019608 ,
          0.29411766, 0.2901961 ],
         [0.15294118, 0.15294118, 0.15294118,   0.3019608 ,
          0.2901961 , 0.28627452],
         [0.15294118, 0.15294118, 0.15294118,   0.3019608 ,
          0.2901961 , 0.28627452]],

        [[0.3137255 , 0.3137255 , 0.3137255 ,   0.20784314,
          0.21176471, 0.21568628],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.20784314,
          0.20784314, 0.21568628],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.20392157,
          0.20784314, 0.21568628],
         [0.21568628, 0.21568628, 0.21568628,   0.21176471,
          0.2       , 0.2       ],
         [0.21568628, 0.21568628, 0.21568628,   0.21176471,
          0.2       , 0.2       ],
         [0.21568628, 0.21568628, 0.21568628,   0.20784314,
          0.2       , 0.2       ]]]], dtype=np.float32), 
          'observation.images.phone': np.array([[[[0.03921569, 0.03921569, 0.03921569,   0.03921569,
          0.03921569, 0.03921569],
         [0.03921569, 0.03921569, 0.03921569,   0.03921569,
          0.03921569, 0.03921569],
         [0.03921569, 0.03921569, 0.03921569,   0.03921569,
          0.03921569, 0.03921569],
         [0.40784314, 0.40784314, 0.40784314,   0.47843137,
          0.47843137, 0.47843137],
         [0.40784314, 0.40784314, 0.4117647 ,   0.4745098 ,
          0.47843137, 0.47843137],
         [0.40392157, 0.40392157, 0.40392157,   0.4745098 ,
          0.4745098 , 0.4745098 ]],

        [[0.07843138, 0.07843138, 0.07843138,   0.07843138,
          0.07843138, 0.07843138],
         [0.07843138, 0.07843138, 0.07843138,   0.07843138,
          0.07843138, 0.07843138],
         [0.07843138, 0.07843138, 0.07843138,   0.07843138,
          0.07843138, 0.07843138],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.37254903,
          0.36862746, 0.36862746],
         [0.3137255 , 0.3137255 , 0.3137255 ,   0.37254903,
          0.36862746, 0.36862746],
         [0.30588236, 0.30588236, 0.30588236,   0.36862746,
          0.3647059 , 0.3647059 ]],

        [[0.12156863, 0.12156863, 0.12156863,   0.12156863,
          0.12156863, 0.12156863],
         [0.12156863, 0.12156863, 0.12156863,   0.12156863,
          0.12156863, 0.12156863],
         [0.12156863, 0.12156863, 0.12156863,   0.12156863,
          0.12156863, 0.12156863],
         [0.21960784, 0.21960784, 0.21960784,   0.2627451 ,
          0.2627451 , 0.2627451 ],
         [0.22352941, 0.22352941, 0.21960784,   0.2627451 ,
          0.2627451 , 0.2627451 ],
         [0.21176471, 0.21176471, 0.20784314,   0.2627451 ,
          0.25882354, 0.25882354]]]], dtype=np.float32)}]
# 合并数据并计算统计数据
def merge_and_calculate_statistics(data):
    # 提取所有 'observation.images.laptop' 和 'observation.images.phone' 的数据
    laptop_images = [item['observation.images.laptop'] for item in data]
    phone_images = [item['observation.images.phone'] for item in data]

    # 合并数据
    merged_laptop = np.concatenate(laptop_images, axis=0)
    merged_phone = np.concatenate(phone_images, axis=0)

    # 计算每个通道的最小值、最大值、均值和标准差
    def calculate_stats(merged_data):
        # 确保数据形状正确
        if len(merged_data.shape) != 4:
            raise ValueError("merged_data must be 4-dimensional (batch_size, channels, height, width)")

        min_values = np.min(merged_data, axis=(1, 2)).tolist()
        max_values = np.max(merged_data, axis=(1, 2)).tolist()
        mean_values = np.mean(merged_data, axis=(1, 2)).tolist()
        std_values = np.std(merged_data, axis=(1, 2)).tolist()
        count = merged_data.shape[1] * merged_data.shape[2]  # 总像素数

        # 格式化为嵌套列表结构
        formatted_min = [[[min_values[i][j]] for j in range(len(min_values[i]))] for i in range(len(min_values))]
        formatted_max = [[[max_values[i][j]] for j in range(len(max_values[i]))] for i in range(len(max_values))]
        formatted_mean = [[[mean_values[i][j]] for j in range(len(mean_values[i]))] for i in range(len(mean_values))]
        formatted_std = [[[std_values[i][j]] for j in range(len(std_values[i]))] for i in range(len(std_values))]

        return {
            "min": formatted_min,
            "max": formatted_max,
            "mean": formatted_mean,
            "std": formatted_std,
            "count": [count]
        }

    laptop_stats = calculate_stats(merged_laptop)
    phone_stats = calculate_stats(merged_phone)

    return {
        "observation.images.laptop": laptop_stats,
        "observation.images.phone": phone_stats
    }

# 计算整体统计数据
overall_stats = merge_and_calculate_statistics(a)

# 打印统计数据
print(json.dumps(overall_stats, indent=4))

# 保存到JSON文件
with open('overall_image_stats.json', 'w') as f:
    json.dump(overall_stats, f, indent=4)

print("整体统计数据已保存到 overall_image_stats.json 文件中。")